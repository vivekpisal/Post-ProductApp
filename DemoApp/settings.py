"""
Django settings for DemoApp project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sl!$@6tl^h1p0wz3(lcx3jpv(6atynaiqb3k+xr8_p9(^6b6jk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# from django.conf import settings


# DATABASE_ROUTERS = ['DemoApp.database_router.DatabaseAppsRouter']
# DATABASE_APPS_MAPPING = {
#      'posts': 'default',
#      'products': 'other',
# }

# DATABASE_MAPPING = settings.DATABASE_APPS_MAPPING


# class DatabaseAppsRouter(object):
#     """
#     A router to control all database operations on models for different
#     databases.

#     In case an app is not set in settings.DATABASE_APPS_MAPPING, the router
#     will fallback to the `default` database.

#     Settings example:

#     DATABASE_APPS_MAPPING = {'app1': 'db1', 'app2': 'db2'}
#     """

#     def db_for_read(self, model, **hints):
#         """"Point all read operations to the specific database."""
#         if model._meta.app_label in DATABASE_MAPPING:
#             return DATABASE_MAPPING[model._meta.app_label]
#         return None

#     def db_for_write(self, model, **hints):
#         """Point all write operations to the specific database."""
#         if model._meta.app_label in DATABASE_MAPPING:
#             return DATABASE_MAPPING[model._meta.app_label]
#         return None

#     def allow_relation(self, obj1, obj2, **hints):
#         """Allow any relation between apps that use the same database."""
#         db_obj1 = DATABASE_MAPPING.get(obj1._meta.app_label)
#         db_obj2 = DATABASE_MAPPING.get(obj2._meta.app_label)
#         if db_obj1 and db_obj2:
#             if db_obj1 == db_obj2:
#                 return True
#             else:
#                 return False
#         return None

#     def allow_syncdb(self, db, model):
#         """Make sure that apps only appear in the related database."""

#         if db in DATABASE_MAPPING.values():
#             return DATABASE_MAPPING.get(model._meta.app_label) == db
#         elif model._meta.app_label in DATABASE_MAPPING:
#             return False
#         return None

#     def allow_migrate(self, db, app_label, model=None, **hints):
#         """
#         Make sure the auth app only appears in the 'auth_db'
#         database.
#         """
#         if db in DATABASE_MAPPING.values():
#             return DATABASE_MAPPING.get(app_label) == db
#         elif app_label in DATABASE_MAPPING:
#             return False
#         return None



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'posts',
    'products',
    'crispy_forms'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DemoApp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DemoApp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    'other': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'student',
        'USER': 'vivek',
        'PASSWORD': 'vivek1',
        'HOST':'localhost',
        'PORT':'3306',
    }
}




# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

CRISPY_TEMPLATE_PACK = 'bootstrap4'


LOGIN_REDIRECT_URL='/'
LOGOUT_REDIRECT_URL='login'
DATABASE_ROUTERS = ['routers.db_routers.Products']